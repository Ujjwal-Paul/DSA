/*******************Trie Node Class*******************/
class Node {
public:
    vector<Node*> list;
    bool flag;

    Node() {
        list.resize(26, nullptr);
        flag = false;
    }

    void set(char ch, Node* link) { list[ch - 'a'] = link; }

    bool find(char ch) { return list[ch - 'a'] != nullptr; }

    Node* get(char ch) { return list[ch - 'a']; }

    void setEnd() { flag = true; }

    bool getEnd() { return flag; }
};

/*******************User Class*******************/
class Trie {
    Node* root = new Node(); // declaring the root

public:
    Trie() {}

    void insert(string word) {
        Node* node = root;

        for (auto it : word) {
            if (!node->find(it)) {
                node->set(it, new Node());
            }

            node = node->get(it);
        }

        node->setEnd();
    }

    bool search(string word) {
        Node* node = root;

        for (auto it : word) {
            if (!node->find(it))
                return false;

            node = node->get(it);
        }

        return node->getEnd();
    }

    bool startsWith(string prefix) {
        Node* node = root;

        for (auto it : prefix) {
            if (!node->find(it))
                return false;

            node = node->get(it);
        }

        return true;
    }
};
